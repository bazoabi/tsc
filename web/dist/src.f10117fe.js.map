{"version":3,"sources":["src/models/User.ts","src/index.ts"],"names":[],"mappings":";;;;;ACAA,IAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAEA,ADKA,ICLM,ADKN,ICLU,ADKV,GCLa,ADKb,ICLiB,MAAA,CAAA,EDKjB,ECLqB,CAAC,SDKtB;ECLwB,ADQtB,ICR0B,EAAE,GDQ5B,IAAA,CCRoC,ADQhB,IAAe,EAAA;ECRG,EDQlB,CCRqB,EAAE,CDQvB,CAAA,IAAI,GAAJ,IAAI;ACRqB,CAAE,CAAC,EDMhD,IAAA,CAAA,MAAM,GAAkC,CAAA,CAAE;ACJ5C,EDMwC,ECNpC,CAAC,EAAE,CAAC,QAAQ,EAAE,YAAA;EAChB,ADOA,IAAA,CAAA,ECPO,CAAC,GAAG,CAAC,EDOZ,CAAA,GAAG,GAAH,ECPuB,CAAC,ODOpB,QAAgB,EAAA;ACNtB,CAAC,CAAC,EDOE,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;ACN9B,EDOE,CAAC,CCPC,CAAC,EAAE,CAAC,QAAQ,EAAE,YAAA;EAChB,ADQA,IAAA,CAAA,ECRO,CAAC,GAAG,CAAC,EDQZ,CAAA,GAAG,GAAH,ECRuB,CAAC,ODQpB,MAAiB,EAAA;ACPvB,CAAC,CAAC,EDQE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC;ACPpC,EDQE,CAAC,CCRC,CAAC,EAAE,CAAC,MAAM,EAAE,YAAA;EACd,ADSA,IAAA,CAAA,ECTO,CAAC,GAAG,CAAC,EDSZ,CAAA,EAAE,GAAF,UAAG,ECT6B,CAAC,MDSb,EAAE,QAAkB,EAAA;ACR1C,CAAC,CAAC,EDSE,IAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE;ACPjD,IAAI,ADQA,CCRC,OAAO,ADQA,CCRC,ADQA,IAAI,CAAC,GCRG,CAAC,IDQI,CAAC;IACvB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,QAAQ;EACnC,CAAC;EAED,IAAA,CAAA,SAAA,CAAA,OAAO,GAAP,UAAQ,SAAiB,EAAA;IACvB,IAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;IAEvC,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;MACtC;;IAGF,QAAQ,CAAC,OAAO,CAAC,UAAA,QAAQ,EAAA;MACvB,QAAQ,CAAA,CAAE;IACZ,CAAC,CAAC;EACJ,CAAC;EACH,OAAA,IAAC;AAAD,CA9BA,CAAA,CAAA;AAAa,OAAA,CAAA,IAAA,GAAA,IAAA","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["interface UserProps {\n  name?: string;\n  age?: number;\n}\n\ntype Callback = () => void;\n\nexport class User {\n  events: { [key: string]: Callback[] } = {};\n\n  constructor(private data: UserProps) {}\n\n  get(propName: string): number | string {\n    return this.data[propName];\n  }\n\n  set(update: UserProps): void {\n    Object.assign(this.data, update);\n  }\n\n  on(eventName: string, callback: Callback): void {\n    const handlers = this.events[eventName] || [];\n    handlers.push(callback);\n    this.events[eventName] = handlers;\n  }\n\n  trigger(eventName: string): void {\n    const handlers = this.events[eventName];\n\n    if (!handlers || handlers.length === 0) {\n      return;\n    }\n\n    handlers.forEach(callback => {\n      callback();\n    });\n  }\n}\n","import { User } from './models/User';\n\nconst user = new User({ name: 'myname', age: 20 });\n\nuser.on('change', () => {\n  console.log('Change #1');\n});\nuser.on('change', () => {\n  console.log('Change #2');\n});\nuser.on('save', () => {\n  console.log('Save was triggered');\n});\n\nuser.trigger('change');\n"]}